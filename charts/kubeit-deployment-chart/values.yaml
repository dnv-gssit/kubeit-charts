---
# REQUIRED: image for application
image:
  # registry and repository, example: myacr.azurecr.io/repository/imagename
  # align naming for ArgoCD image updater
  name: nginx
  # image tag
  tag: ""
  # https://kubernetes.io/docs/concepts/containers/images/#updating-images
  imagePullPolicy: IfNotPresent

# REQUIRED: resource requests and limits for the main container in pod
# https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
# note: recommendation is to do NOT set limit for cpu
resources:
  requests:
    cpu: "10m"
    memory: "64Mi"
  limits:
    memory: "64Mi"

# Application name
# If set, it would be used to render K8S resources names and labels
app: ""

# Number of pod replicas
# it is not taken into account if hpa.enabled=true
replicaCount: 1

# Application upgrade strategy
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
strategy: {}

# Additional pod labels
additionalPodLabels: {}
# Example: https://istio.io/latest/docs/reference/config/labels/

# Additional pod annotations
additionalPodAnnotations: {}
# Example: https://preliminary.istio.io/latest/docs/reference/config/annotations/

# Additional containers in the pod
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#container-v1-core
additionalContainers: []

# Init containers for the pod
# https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
initContainers: []

# Period to terminate the pod gracefully
# https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
terminationGracePeriodSeconds: 30

# Pod security context
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}

# The main container security context
# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
securityContext: {}

# List of arguments for the main container
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.32/#container-v1-core
args: []

# List of environment variables for the main container
# https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
envs: []

# List of environment variables for the main container mapped from K8S secrets or configMaps
# https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#define-container-environment-variables-using-secret-data
envsFrom: []

# Pod probes config for the main container
# See: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
health:
  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}

# List of volume mounts for the main container
# names must match the volumes below
valumeMounts: []

# List of volumes to mount in the pod
# https://kubernetes.io/docs/concepts/storage/volumes/
volumes: []

# Node selectors for the pod
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# Tolerations for the pod
# https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# Affinity rules for the pod
# https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/
affinity: {}

# Application auto-scaling config
# https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
hpa:
  enabled: false
  maxReplicas: 3
  minReplicas: 1
  targetCPUUtilizationPercentage: 40
  # targetMemoryUtilizationPercentage: 80

# K8S configMap config
configMap:
  create: false
  # If not set and create is true, a name is generated from the helm chart
  name: ""
  data: {}

# K8S serviceaccount config
serviceAccount:
  create: false
  # If not set and create is true, a name is generated from the helm chart
  name: ""
  # Annotations for service account
  annotations: {}
  # azure.workload.identity/client-id: 11111111-2222-3333-4444-555555555555
  # azure.workload.identity/tenant-id: adf10e2b-b6e9-41d6-be2f-c12bb566019c

# K8S service config
service:
  create: true
  # type of service: ClusterIP for most cases
  #                  LoadBalancer for TCP services exposed via F5
  type: ClusterIP
  # container port for the main container
  containerPort: 80
  # service port
  port: 80
  # annotations for service
  annotations: {}
  # additional labels for service
  labels: {}

# K8S istio gateway reference config
gateway:
  # gateway provided by KubeIT for exposure services via F5
  # https://docs.kubeit-int.dnv.com/documentation/components/networking/#external-dns
  name: istio-system/global-https-internal-default-gateway
  # gateway provided by KubeIT for exposure service internally within DNV network only
  # https://docs.kubeit-int.dnv.com/documentation/components/internal-exposure/
  internalName: istio-system/global-internaluse-gateway

# Config for service exposure from cluster
# https://istio.io/latest/docs/reference/config/networking/virtual-service/
defaultRouting:
  # create CR virtualservices, only valid if service.create=true
  create: false
  # decide if generate one domain per CR VirtualService
  # https://docs.kubeit-int.dnv.com/release/breaking-changes-2.2/#virtualservice-host-list
  oneDomainPerVirtualService: true

  # Once defaultRouting.create=true, hosts or internalHosts or both must be set

  # external hosts to take into account for routing rules
  # if set [auto] FQDN will be created based on kubeit parameters and release name
  hosts: []
  # - myhost.dnv.com

  # internal hosts to take into account for routing rules
  # <service>.dnv.com - DNS record should be requested to GSS IT / TLS supported (one "dot" level only!)
  # <service>[.<color>].<region>.<environment>.kubeit-int.dnv.com - works immediately / TLS supported
  # if set [auto] FQDN will be created based on kubeit parameters and release name
  internalHosts: []
  # - myhost.green.we.nonprod.kubeit-int.dnv.com

  # http traffic config
  # https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService-http
  # if not set, create default match.uri.prefix=/
  http: []

  # tcp traffic config
  # https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService-tls
  tcp: []

  # tsl traffic config
  # https://istio.io/latest/docs/reference/config/networking/virtual-service/#VirtualService-tls
  tls: []

  # CORS policy config
  # https://istio.io/latest/docs/reference/config/networking/virtual-service/#CorsPolicy
  corsPolicy: {}

# Destination rule config
# https://istio.io/latest/docs/reference/config/networking/destination-rule/
destinationRule:
  create: false
  spec: {}

# RequestAuthentication config
# https://istio.io/latest/docs/reference/config/security/request_authentication/
requestAuthentication:
  create: false
  jwtRules: []

# AuthorizationPolicy config
# https://istio.io/latest/docs/reference/config/security/authorization-policy/
authorizationPolicy:
  # Generate default authorization policy
  create: false
  spec: {}

# Networkpolicy config
# https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  create: false
  spec: {}

# SecretStore is definition how to access Azure Key Vault
# serviceAccount.create=true and annotations for Workload Identity must be set on the serviceaccount
# https://docs.kubeit.dnv.com/documentation/components/access-management/?h=workload#workload-identity
secretStore:
  create: false
  vaultUrl: ""

# ExternalSecrets is definition how to create k8s secret based on Azure Key Vault secret
# secretStore.create=true must be set to use ExternalSecrets
externalSecrets: []
# - name: k8s-secret-name
#   key: k8s-secret-key
#   azureSecretName: name-of-secret-in-azure-key-vault

# Support Veracity session manager
# https://docs.kubeit-int.dnv.com/onboarding/veracity-registration/
sessionManagerDeployment: false

# KubeIT injected values
# https://docs.kubeit-int.dnv.com/onboarding/deployments-scenarios/?h=ingresstype#helm-chart-deployments
# kubeit:
#   env: nonprod
#   region: we
#   dnsDomain: kubeit.dnv.com
#   internalDnsDomain: kubeit-int.dnv.com
#   clusterSubdomain: nonprod005
#   clusterColour: green
#   ingressType: default
#   shortRegion: we
#   tenantName: tenant
#   targetRevision: main
#   repoURL: https://github.com/example.git
#   networkPlugin: azure
#   tenantMultiRegion: false
#   managementNamespace: management-tenant
