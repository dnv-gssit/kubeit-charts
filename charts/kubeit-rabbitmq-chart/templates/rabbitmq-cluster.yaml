apiVersion: rabbitmq.com/v1beta1
kind: RabbitmqCluster
metadata:
  name: {{ printf "%s-%s" .Release.Name .Values.tenantName | trunc 63 | trimSuffix "-" }}
  labels:
    {{- include "kubeit-rabbit-chart.labels" . | nindent 4 }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  image: {{ .Values.rabbitmqCluster.image }}
  replicas: {{ .Values.rabbitmqCluster.spec.replicas }}
{{- if .Values.rabbitmqCluster.defaultUserSecret }}
  secretBackend:
    externalSecret:
      name: {{ .Values.rabbitmqCluster.defaultUserSecret }}
{{- end }}
  resources:
    requests:
      cpu: {{ .Values.rabbitmqCluster.spec.resources.requests.cpu }}
      memory: {{ .Values.rabbitmqCluster.spec.resources.requests.memory }}
    limits:
     memory: {{ .Values.rabbitmqCluster.spec.resources.limits.memory }}
     cpu: {{ .Values.rabbitmqCluster.spec.resources.limits.cpu }}
  override:
    service:
      metadata:
        labels:
          {{- include "kubeit-rabbit-chart.selectorLabels" . | nindent 10 }}
{{- if .Values.persistentVolume.external }}
    statefulSet:
      spec:
        template:
          spec:
            securityContext:
              runAsUser: 1001
              runAsNonRoot: true
              runAsGroup: 1001
              fsGroup: 1001
              fsGroupChangePolicy: "OnRootMismatch"
            containers:
              - name: rabbitmq
                securityContext:
                  allowPrivilegeEscalation: false
                  privileged: false
                volumeMounts:
                  - mountPath: /var/lib/rabbitmq/mnesia/
                    name: {{ .Values.rabbitmqCluster.spec.containers.volumeMount.name }}
            initContainers:
              - command: ['sh', '-c', 'chown -R 1001:1001 /var/lib/rabbitmq/mnesia && chmod g+ws /var/lib/rabbitmq/mnesia']
                image: kubeitglobalsvcauxacrwe.azurecr.io/library/busybox:latest
                imagePullPolicy: IfNotPresent
                name: setup-fix-permissions
                securityContext:
                  runAsUser: 0
                  runAsNonRoot: false
                resources:
                  requests:
                    cpu: 100m
                    memory: 50Mi
                  limits:
                    memory: 100Mi
                volumeMounts:
                  - mountPath: /var/lib/rabbitmq/mnesia/
                    name: {{ .Values.rabbitmqCluster.spec.initContainers.volumeMount.name }}
              - name: setup-container
                securityContext:
                  allowPrivilegeEscalation: false
                  privileged: false
                volumeMounts:
                  - mountPath: /var/lib/rabbitmq/mnesia/
                    name: {{ .Values.rabbitmqCluster.spec.initContainers.volumeMount.name }}
        volumeClaimTemplates:
          - apiVersion: v1
            kind: PersistentVolumeClaim
            spec:
              accessModes:
                {{- range .Values.persistentVolume.accessModes }}
                - {{ . }}
                {{- end }}
              storageClassName: {{ required "A storage class name is required" .Values.persistentVolume.storageClassName }}
              resources:
                requests:
                  storage: {{ .Values.persistentVolume.capacity.storage }}
            metadata:
              name: persistence-testmq
{{- end }}
  rabbitmq:
    additionalConfig: |
      {{ .Values.rabbitmqCluster.additionalConfig | nindent 6 }}
      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      cluster_formation.k8s.hostname_suffix = .rabbitmq-test-spi-nodes.spi-test-rabbitmq
      cluster_formation.node_cleanup.interval = 30
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_formation.target_cluster_size_hint = {{ .Values.rabbitmqCluster.spec.replicas }}
      cluster_formation.internal_lock_retries = 30
      cluster_partition_handling = autoheal
      queue_master_locator = balanced
    {{- if .Values.rabbitmqCluster.advancedConfig }}
    advancedConfig: |
      {{ .Values.rabbitmqCluster.advancedConfig | nindent 6 }}
    {{- end }}
    {{- if .Values.rabbitmqCluster.additionalPlugins }}
    additionalPlugins: |
    {{- range .Values.rabbitmqCluster.additionalPlugins }}
      - {{ . }}
    {{- end }}
    {{- end }}
  {{- if .Values.rabbitmqCluster.tls.enabled }}
  tls:
    secretName: {{ .Values.rabbitmqCluster.tls.secretName }}
  {{- end }}
  persistence:
    storage: {{ .Values.persistentVolume.capacity.storage }}
    storageClassName: {{ required "A storage class name is required" .Values.persistentVolume.storageClassName }}
  service:
    type: {{ .Values.service.type }}
